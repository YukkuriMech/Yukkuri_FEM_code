function [U]=SquareFEM_static
square.nx = 120;    %Number of elements in x direction
square.ny = 6;    %Number of elements in y direction    
square.a = 10e-3;    %Element size [m] 
mat.E = 206e9;    %Young's modulus [Pa]
mat.PR = 0.3;    %Poisson's ratio
post.m = 1000;    %Displacement magnification (post process)
[U]=fea(square,mat,post);
end

%%%%%%%%%% Finite element analysis %%%%%%%%%%
function [U]=fea(square,mat,post)
nx=square.nx;
ny=square.ny;
a=square.a;
K=zeros(2*(nx+1)*(ny+1),2*(nx+1)*(ny+1));    %Stiffness matrix
U=sparse(2*(nx+1)*(ny+1),1);    %Displacement vector

close all
figure(1)    %FE model
for iy=1:ny
for ix=1:nx
    n1=(ny+1)*(ix-1)+iy;
    n2=(ny+1)*ix+iy;
    elem=[2*n1-1; 2*n1; 2*n2-1; 2*n2; 2*(n2+1)-1; 2*(n2+1); 2*(n1+1)-1; 2*(n1+1)];
    xc=[a*(ix-1) a*ix a*ix a*(ix-1)];
    yc=[a*(iy-1) a*(iy-1) a*iy a*iy];
    [Ke]=feelk(xc,yc,square,mat);    %Element stiffness matrix
    K(elem,elem)=K(elem,elem)+Ke;
    patch(xc,yc,'w')
    hold on
end
end
    axis equal
    hold off

F=sparse(2*(nx*(ny+1)+ny/2+1),1,-1000,2*(nx+1)*(ny+1),1);    %Nodal force vector
FixDOF=1:2*(ny+1);
AllDOF=1:2*(nx+1)*(ny+1);
FreeDOF=setdiff(AllDOF,FixDOF);

K=sparse(K);
U(FreeDOF,:)=K(FreeDOF,FreeDOF)\F(FreeDOF,:);
U(FixDOF,:)=0;

figure(2)    %Deformed shape
m = post.m;
for iy=1:ny
for ix=1:nx 
    n1=(ny+1)*(ix-1)+iy;
    n2=(ny+1)*ix+iy;
    elem=[2*n1-1; 2*n1; 2*n2-1; 2*n2; 2*(n2+1)-1; 2*(n2+1); 2*(n1+1)-1; 2*(n1+1)];
    xc=[a*(ix-1)+m*U(elem(1),:) a*ix+m*U(elem(3),:) a*ix+m*U(elem(5),:) a*(ix-1)+m*U(elem(7),:)];
    yc=[a*(iy-1)+m*U(elem(2),:) a*(iy-1)+m*U(elem(4),:) a*iy+m*U(elem(6),:) a*iy+m*U(elem(8),:)];
    patch(xc,yc,'w')
    hold on
end
end
    axis equal
    hold off
end

%%%%%%%%%% Element stiffnes matrix %%%%%%%%%%
function [Ke]=feelk(xc,yc,square,mat)
E=mat.E;
PR=mat.PR;
Cm=E/((1+PR)*(1-2*PR))*[1-PR PR 0; PR 1-PR 0; 0 0 (1-2*PR)/2];
[point,weight]=feglqd;
Ke=zeros(8,8);
for i=1:4
    [dhds,dhdt]=feshape(point(i,1),point(i,2));
    [jcb]=fejcb(xc,yc,dhds,dhdt);
    [Bme]=febme(dhds,dhdt,square);
    Ke=Ke+weight(i)*Bme'*Cm*Bme*det(jcb);
end
end

%%%%%%%%%% Gauss-Legendre quadrature points and weights %%%%%%%%%%
function [point,weight]=feglqd
point=[-3^(-0.5) -3^(-0.5);
        3^(-0.5) -3^(-0.5);
        3^(-0.5)  3^(-0.5);
       -3^(-0.5)  3^(-0.5)];
weight=[1; 1; 1; 1];
end

%%%%%%%%%% Derivatives of shape function %%%%%%%%%%
function [dhds,dhdt]=feshape(s,t)
dhds(1)=-0.25*(1-t);
dhds(2)= 0.25*(1-t);
dhds(3)= 0.25*(1+t);
dhds(4)=-0.25*(1+t);
dhdt(1)=-0.25*(1-s);
dhdt(2)=-0.25*(1+s);
dhdt(3)= 0.25*(1+s);
dhdt(4)= 0.25*(1-s);
end

%%%%%%%%%% Jacobian matrix %%%%%%%%%%
function [jcb]=fejcb(xc,yc,dhds,dhdt)
jcb=zeros(2,2);
for i=1:4
    jcb(1,1)=jcb(1,1)+dhds(i)*xc(i);
    jcb(1,2)=jcb(1,2)+dhds(i)*yc(i);
    jcb(2,1)=jcb(2,1)+dhdt(i)*xc(i);
    jcb(2,2)=jcb(2,2)+dhdt(i)*yc(i);
end
end

%%%%%%%%%% B matrix %%%%%%%%%%
function [Bme]=febme(dhds,dhdt,square)
a = square.a;
Bme=[dhds(1) 0       dhds(2) 0       dhds(3) 0       dhds(4) 0;
     0       dhdt(1) 0       dhdt(2) 0       dhdt(3) 0       dhdt(4);
     dhdt(1) dhds(1) dhdt(2) dhds(2) dhdt(3) dhds(3) dhdt(4) dhds(4);]*(2/a);
end
